from pqepy import pqe
import pandas as pd
from textblob import TextBlob
rs = pqe.connect_redshift()
from pqepy import pqe
## knitr options
knitr::opts_chunk$set(comment = NA)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(fig.retina = 3)
# knitr::opts_chunk$set(echo = FALSE)
## printing options
options(digits = 3)
## load the packages
df = data.frame(a=c('False', 'False', 'True'),
b=c('True', 'False', 'False'),
c=c('True', 'True', 'True'))
df
df = data.frame(a=c('False', 'False', 'True'),
b=c('True', 'False', 'False'),
c=c('True', 'True', 'True'))
row.names(df) = 1:3
df
df = data.frame(a=c('False', 'True', 'True'),
b=c('True', 'False', 'False'),
c=c('True', 'True', 'True'))
row.names(df) = 1:3
df
df = data.frame(a=c('False', 'True', 'True'),
b=c('True', 'False', 'False'),
c=c('False', 'True', 'True'))
row.names(df) = 1:3
df
df = data.frame(a=c('False', 'True', 'False'),
b=c('True', 'False', 'False'),
c=c('True', 'True', 'True'))
row.names(df) = 1:3
df
devtools::install_github("hadley/emo")
libray(arules)
library(arules)
data(Groceries)
View(Groceries)
View(Groceries)
class(Groceries)
as.data.frame(Groceries)
options(stringsAsFactors = FALSE)
library(jsonlite)
FPATH = "~/Downloads/DoctorPepperReportSchema.json"
# bring in the file
drp = read_json(FPATH)
# shape
class(drp)
# bring in the file
drp = read_json(FPATH, simplifyVector = TRUE)
# shape
class(drp)
length(drp)
names(drp)
# wflow
workflow = drp$workflow
users = drp$user
# go back to workflow
names(workflow)
sapply(workflow, function(x) type(x))
sapply(workflow, function(x) class(x))
sapply(workflow, function(x) class(x), simplify = TRUE)
sapply(workflow, function(x) class(x))
# get workflow steps
workflow_steps = workflow$workflowSteps
describe(users)
glimpse(users)
suppressPackageStartupMessages(library(tidyverse))
glimpse(users)
glimpse(workflow_steps)
## lets flatten
users_flat = flatten(users)
## lets flatten
users_flat = flatten(users, recursive=TRUE)
## lets flatten
users_flat = flatten(users, recursive = TRUE)
## lets flatten
users_flat = flatten(users, recursive = TRUE)
install.packages("jsonlite")
options(stringsAsFactors = FALSE)
# imports
library(jsonlite)
suppressPackageStartupMessages(library(tidyverse))
FPATH = "~/Downloads/DoctorPepperReportSchema.json"
# bring in the file
drp = read_json(FPATH, simplifyVector = TRUE)
# shape
class(drp)
length(drp)
names(drp)
# wflow
workflow = drp$workflow     # list
users = drp$user      # dataframe
# go back to workflow
names(workflow)
sapply(workflow, function(x) class(x))
# get workflow steps
workflow_steps = workflow$workflowSteps
## lets flatten
users_flat = flatten(users, recursive = TRUE)
## lets flatten
users_flat = flatten(users)
View(users_flat)
workflow %>% drop(workflow_steps)
wflow_info = workflow
wflow_info$workflowSteps = NULL
# steps
steps = flatten(workflow_steps)
library(purrr)
wflow_info = map_dfr(wflow_info, function(x) x)
wflow_info = map_dfr(wflow_info, wflow_info)
wflow_info = map_dfr(wflow_info, dplyr::bind_rows)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = map_dfr(wflow_info, dplyr::bind_rows)
wflow_info = map_df(wflow_info, dplyr::bind_rows)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = map_df(wflow_info, dplyr::bind_rows)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = map_df(wflow_info, ~.x)
wflow_info = map_df(wflow_info, ~.wflow_info)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = map_df(wflow_info, ~.wflow_info)
wflow_info = map_df(wflow_info, ~wflow_info)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = map_df(wflow_info, ~wflow_info)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = unlist(wflow_info)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info
map_dfr(wflow_info, as.list)
wflow_info = as.data.frame(wflow_info)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
map_dfc(wflow_info)
map_dfc(wflow_info, function(x) x)
map_dfc(wflow_info, function(x) unlist(x))
map_dfr(wflow_info, function(x) unlist(x))
wflow_info
map_dfr(list(wflow_info), function(x) x)
map_df(list(wflow_info), function(x) x)
map_df(list(wflow_info), function(x) unlist)
# workflow
wflow_info = workflow
wflow_info$workflowSteps = NULL
wflow_info = as.data.frame(wflow_info)
df <- data.frame(matrix(unlist(wflow_info),
nrow=length(wflow_info),
byrow=T))
data.frame(t(sapply(wflow_info,c)))
# get workflow steps
workflow_steps = workflow$workflowSteps
# steps
steps = flatten(workflow_steps)
setwd("~/github/ba820-spring2021/sessions/02-dist-hclust")
